//============================================================================
// Name        : gloriousPrimes.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <utility>

using namespace std;
vector< int >  order;
vector< vector< int > > validStrings;

int primes[14] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43} ;
int count = 0;
int limit = 6;

bool is_prime(int n){
	int test = n / 10000 + n % 10000 / 1000 + n % 1000 / 100 + n % 100 / 10 + n % 10;
	for(int i: primes){
		if(test == i){
			return true;
		}
	}
	return false;
}

int binary_search(int n){
	int len = order.size();
	int chunk = 2;
	int place = len / chunk;
	while(order[place] != n){
		chunk *= 2;
		if(order[place] > n){
			place -= (len / chunk) ? (len / chunk) : 1;
		}else if (order[place] < n){
			place += (len / chunk) ? (len / chunk) : 1;
		}
	}
	return place;
}

void brain(int n, int d){
	if(d == limit){
		count++;
		return;
	}
	int place = binary_search(n);
	for(int h: validStrings[place]){
		int next = n / 10 * 10 + h;
	}
}

int main() {
	for(int i = 1; i < 100000; i++){
		if(is_prime(i % 1000)
			&& is_prime(i / 10 % 1000)
			&& is_prime(i / 100 % 1000)
			&& is_prime(i % 10000)
			&& is_prime(i / 10 % 10000)
			&& is_prime(i)){
				vector< int > list;
				order.push_back(i);
				validStrings.push_back(list);
				count++;
			}
	}
	for(int pair1: order){
		int str1 = pair1;
		int place = binary_search(pair1);
		str1 = str1 % 10000;
		for(int pair2: order){
			int str2 = pair2;
			int lastDigit = str2 % 10;
			str2 = str2 / 10;
			if(str1 == str2){
				validStrings[place].push_back(lastDigit);
			}
		}
	}
	for(int pair1: order){
		if(pair1 < 10000){
			continue;
		}
		brain(pair1, 4);
	}

}


