
#include <vector>
#include <set>
#include <iostream>
#include <cstdio>

using namespace std;

const int INF = 1000000000;
const int MAX_NODES = 1000 + 10;
const int TYPES = 1024 + 10;


vector<pair<int, int>> connectionMap[MAX_NODES];
int typesOffered[MAX_NODES];
int traveledPaths[MAX_NODES][TYPES];
set<pair<int, pair<int, int> > > locations;
int centers, roads, types;
int cti, cni;
int center1, center2, dist;
int typesMask;

void inline push_location(int currentLocation, int currentItems, int currentDistanceTraveled){
	if (traveledPaths[currentLocation][currentItems] <= currentDistanceTraveled){
		return;
	}
	traveledPaths[currentLocation][currentItems] = currentDistanceTraveled;
	locations.insert(make_pair(currentLocation, make_pair(currentItems, currentDistanceTraveled)));
}

int main(){
	cin >> centers >> roads >> types;
	for(int center = 1; center <= centers; center++){
		cin >> cni;
		for(int i = 0; i < cni; i++){
			cin >> cti;
			typesOffered[center] |= (1 << (cti - 1));
		}
//		cout << typesOffered[center] << endl;
	}
	for(int road = 1; road <= roads; road++){
		cin >> center1 >> center2 >> dist;
		connectionMap[center1].push_back(make_pair(center2, dist));
		connectionMap[center2].push_back(make_pair(center1, dist));
	}
	for(int i = 0; i < MAX_NODES; i++){
		for(int j = 0; j < TYPES; j++){
			traveledPaths[i][j] = INF;
		}
	}
	push_location(1, typesOffered[1], 0);
	while(locations.size() > 0){
		int startingPoint = locations.begin()->first;
		int startingItems = locations.begin()->second.first;
		int startingDistance = locations.begin()->second.second;
		for(int option = 0; option < connectionMap[startingPoint].size(); option++){
			push_location(connectionMap[startingPoint][option].first, typesOffered[connectionMap[startingPoint][option].first] | startingItems, startingDistance + connectionMap[startingPoint][option].first);
		}
	}
}
